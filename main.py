import os
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# üìä –î–∞–Ω—ñ
stats = defaultdict(lambda: {"work": 0, "away": 0})
away_time = None
work_start_time = None
last_date = None

# üéõ –ö–Ω–æ–ø–∫–∏
def get_main_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("üü¢ –ù–∞ —Ä–æ–±–æ—á–æ–º—É –º—ñ—Å—Ü—ñ", callback_data="back_to_work"),
        InlineKeyboardButton("üî¥ –ü—ñ—à–æ–≤", callback_data="left_work")
    )
    return keyboard

# ‚ñ∂Ô∏è /start
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    global work_start_time, last_date
    now = datetime.datetime.now()
    today = now.date()

    if last_date != today:
        last_date = today
    if work_start_time is None:
        work_start_time = now

    await message.answer("–û–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:", reply_markup=get_main_keyboard())

# üî¥ –ü—ñ—à–æ–≤
@dp.callback_query_handler(Text(equals="left_work"))
async def handle_left(callback: types.CallbackQuery):
    global away_time, work_start_time, stats

    now = datetime.datetime.now()
    today = now.date()
    work_text = "‚ùì –†–æ–±–æ—á–∏–π —á–∞—Å –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ"

    if work_start_time:
        session = (now - work_start_time).total_seconds()
        stats[today]["work"] += session

        minutes = int(session // 60)
        hours = minutes // 60
        mins = minutes % 60

        work_text = f"‚úÖ –†–æ–±–æ—Ç–∞ –ø–µ—Ä–µ–¥ —Ü–∏–º: {hours} –≥–æ–¥ {mins} —Ö–≤"

    away_time = now
    work_start_time = None

    await callback.message.answer(
        f"üî¥ –•—Ç–æ—Å—å –≤–∏–π—à–æ–≤ –∑ —Ä–æ–±–æ—á–æ–≥–æ –º—ñ—Å—Ü—è.\n{work_text}",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

# üü¢ –ü–æ–≤–µ—Ä–Ω—É–≤—Å—è
@dp.callback_query_handler(Text(equals="back_to_work"))
async def handle_back(callback: types.CallbackQuery):
    global away_time, work_start_time, stats, last_date

    now = datetime.datetime.now()
    today = now.date()

    if last_date != today:
        last_date = today

    if away_time:
        session = (now - away_time).total_seconds()
        stats[today]["away"] += session
        away_time = None

    work_start_time = now

    away_sec = stats[today]["away"]
    work_sec = stats[today]["work"]
    if work_start_time:
        work_sec += (now - work_start_time).total_seconds()

    text = (
        f"üü¢ –•—Ç–æ—Å—å –ø–æ–≤–µ—Ä–Ω—É–≤—Å—è –Ω–∞ —Ä–æ–±–æ—á–µ –º—ñ—Å—Ü–µ.\n"
        f"‚è± –í—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –∑–∞ –¥–µ–Ω—å: {int(away_sec // 3600)} –≥–æ–¥ {int(away_sec % 3600 // 60)} —Ö–≤\n"
        f"‚úÖ –†–æ–±–æ—Ç–∞ –∑–∞ –¥–µ–Ω—å: {int(work_sec // 3600)} –≥–æ–¥ {int(work_sec % 3600 // 60)} —Ö–≤"
    )

    await callback.message.answer(text, reply_markup=get_main_keyboard())
    await callback.answer()

# üìä /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
@dp.message_handler(commands=['stats'])
async def handle_stats(message: types.Message):
    now = datetime.datetime.now()
    today = now.date()
    week_dates = [(today - datetime.timedelta(days=i)) for i in range(6, -1, -1)]

    text = "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤:\n\n"
    total_work = 0
    total_away = 0

    for day in week_dates:
        work = stats[day]["work"]
        away = stats[day]["away"]
        total_work += work
        total_away += away
        text += f"üìÖ {day.strftime('%a %d.%m')} ‚Äî üü¢ {int(work // 3600)}–≥ {int(work % 3600 // 60)}—Ö, üî¥ {int(away // 3600)}–≥ {int(away % 3600 // 60)}—Ö\n"

    text += (
        f"\nüü¢ –ó–∞–≥–∞–ª–æ–º –ø—Ä–∞—Ü—é–≤–∞–ª–∏: {int(total_work // 3600)} –≥–æ–¥ {int(total_work % 3600 // 60)} —Ö–≤\n"
        f"üî¥ –ó–∞–≥–∞–ª–æ–º –±—É–ª–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ: {int(total_away // 3600)} –≥–æ–¥ {int(total_away % 3600 // 60)} —Ö–≤"
    )

    await message.answer(text)

# üü¢ –°—Ç–∞—Ä—Ç / —Å—Ç–æ–ø
async def on_startup(dp):
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")

async def on_shutdown(dp):
    print("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

if __name__ == '__main__':
    print("üü° main.py –∑–∞–ø—É—â–µ–Ω–æ")
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup, on_shutdown=on_shutdown)
